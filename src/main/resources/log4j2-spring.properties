# log4j2内部自身的日志级别
status = debug
# 配置日志信息输出到哪里：err表示作为标准错误输出，还可以是一个文件路径或者一个URL
dest = err
# 配置名称
name = PropertiesConfig


#配置第三方包的日志，指定级别
logger.springframework.name=org.springframework
logger.springframework.level=error

logger.cloudconfig.name=org.springframework.cloud.config.client
logger.cloudconfig.level=info

logger.lettuce.name=io.lettuce
logger.lettuce.level=error

logger.netty.name=io.netty
logger.netty.level=error

logger.quartz.name=org.quartz
logger.quartz.level=warn

logger.kafka.name=org.apache.kafka
logger.kafka.level=info

logger.redisson.name=org.redisson
logger.redisson.level=info

logger.hibernate.name=org.hibernate
logger.hibernate.level=info

logger.eureka.name=org.hibernate
logger.eureka.level=info

logger.apache.name=org.apache
logger.apache.level=info

logger.springfoxValidator.name=Validator
logger.springfoxValidator.level=info

logger.springfox.name=springfox
logger.springfox.level=info

# 自定义属性名称，以便在之后的配置中使用，如${filename}
property.filename = /home/kunghsu/springboot/logs/kunsharedemo.log

# 级别过滤（过滤日志记录）
filter.threshold.type = ThresholdFilter
# 只记录debug级别以上的日志，大小写都可以
filter.threshold.level = debug

# 控制台类型的日志输出源
appender.console.type = Console
# 名称 ：唯一
appender.console.name = STDOUT
# 布局类型
appender.console.layout.type = PatternLayout
# 输出模板格式 这是springboot
#appender.console.layout.pattern = %d{yyyy-MM-dd HH:mm:ss.SSS} -%5p ${PID:-} [%15.15t] %C{1.} [%t]: %m%n
#appender.console.layout.pattern = %d{yyyy-MM-dd HH:mm:ss.SSS} -%5p ${PID:-} myrequestId=%X{requestId} [%15.15t] %C\:%L [%t]: %m%n
#appender.console.layout.pattern = %d{yyyy-MM-dd HH:mm:ss.SSS} [%t] -%5p ${PID:-} [%X{X-B3-TraceId},%X{X-B3-SpanId},%X{X-B3-ParentSpanId},%X{X-Span-Export}] %C\:%L - %m%n
appender.console.layout.pattern = [%d{yyyy-MM-dd HH:mm:ss.SSS}] [%t] %p [%X{traceId}] %C\:%L - %m%n


# 过滤级别 ThresholdFilter：低于级别的不输出
appender.console.filter.threshold.type = ThresholdFilter
# 记录日志的级别
appender.console.filter.threshold.level = debug

# 滚动文件，会根据配置如文件大小或者时间自动生成一个新文件
appender.rolling.type = RollingFile
appender.rolling.name = RollingFile
# 日志文件名称
appender.rolling.fileName = ${filename}
# 日志回滚的文件命名规则
appender.rolling.filePattern = /home/kunghsu/springboot/logs/phoenix.%d{yyyy-MM-dd}-%i.log
appender.rolling.layout.type = PatternLayout
# 输出格式
appender.rolling.layout.pattern = [%d{yyyy-MM-dd HH:mm:ss.SSS}] [%t] %p [%X{traceId}] %C\:%L - %m%n
# 滚动日志的策略，即设置何时新建日志文件输出日志
appender.rolling.policies.type = Policies
# 设置时间
appender.rolling.policies.time.type = TimeBasedTriggeringPolicy
# 指定多久滚动一次 单位跟着filePattern配置精度最后一位 ，这里就是2秒了
appender.rolling.policies.time.interval = 2
appender.rolling.policies.time.modulate = true
# 日志文件的大小
appender.rolling.policies.size.type = SizeBasedTriggeringPolicy
# 为了测试设置小一点
appender.rolling.policies.size.size=50MB

##  还有其他的触发条件如:CronTriggeringPolicy 按Cron表达式进行的 具体使用可自行搜索

# 指定同一个文件夹下最多有几个日志文件时开始删除最旧的，创建新的
appender.rolling.strategy.type = DefaultRolloverStrategy
# 最多5个文件,其实还是看filePattern的i的值，当大于5后，就会自动覆盖了
appender.rolling.strategy.max = 5



rootLogger.level = debug
rootLogger.appenderRef.stdout.ref = STDOUT
rootLogger.appenderRef.rolling.ref = RollingFile